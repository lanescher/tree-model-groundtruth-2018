setwd("C:/Users/lscher/Documents/Github/tree-model-groundtruth-2018")
getwd
getwd()
# read in files
model1 <- read.csv(paste("../DATA/branchdata/", date1, "_branch", branch, ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
# INPUT BRANCH NUMBER AND MODEL DATES
branch <- "01"
date1 <- "171221"
date2 <- "180109"
# read in files
model1 <- read.csv(paste("../DATA/branchdata/", date1, "_branch", branch, ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
# read in files
model1 <- read.csv(paste("../DATA/", date1, "_branch", branch, ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
# INPUT BRANCH NUMBER AND MODEL DATES
tree <- "memorialoak"
# read in files
model1 <- read.csv(paste("../DATA/", tree, "_", date1, "_branch", branch, ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
# read in files
model1 <- read.csv(paste("/DATA/", tree, "_", date1, "_branch", branch, ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
# read in files
model1 <- read.csv(paste("DATA/", tree, "_", date1, "_branch", branch, ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
model2 <-read.csv(paste("DATA/", tree, "_", date2, "_branch", branch, ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
# get rid of columns that you don't need
model1 <- model1[,-c(2:8)]
model2 <- model2[,-c(2:8)]
# find matching nodes
overlap <- merge(model1, model2, by = "X.Label")
overlap$node <- gsub("\\.", "*", overlap$X.Label)
overlap$node <- gsub("-", ".", overlap$node)
# find the nodes that are only in model1
model1.only <- setdiff(model1$X.Label, overlap$X.Label)
model1.only <- as.data.frame(model1.only)
model1.only$node <- gsub("\\.", "*", model1.only[,1])
model1.only$node <- gsub("-", ".", model1.only$node)
# find the nodes that are only in model2
model2.only <- setdiff(model2$X.Label, overlap$X.Label)
model2.only <- as.data.frame(model2.only)
model2.only$node <- gsub("\\.", "*", model2.only[,1])
model2.only$node <- gsub("-", ".", model2.only$node)
# make new dataframe with two columns, node and label, to combine with dfs for each model
both <- as.data.frame(overlap$node)
both$label <- "both"
names(both) <- c("node", "label")
# make new dataframe with same columns for model 1
model1.only.list <- as.data.frame(model1.only$node)
model1.only.list$label <- date1
names(model1.only.list) <- c("node", "label")
# make new dataframe with same columns for model 2
model2.only.list <- as.data.frame(model2.only$node)
model2.only.list$label <- date2
names(model2.only.list) <- c("node", "label")
# combine dfs into one
final <- rbind(both, model1.only.list, model2.only.list)
# write new csv with all nodes listed and label stating which models it is present in
write.csv(final, file = paste("DATA/", tree, "_", branch, "_merged.csv", sep = ""))
branch <- c("01", "03", "05", "08", "09", "10", "13")
i <- 1
i <- 1
for (i in 1:length(branch)) {
# read in files
model1 <- read.csv(paste("DATA/", tree, "_", date1, "_branch", branch[i], ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
model2 <-read.csv(paste("DATA/", tree, "_", date2, "_branch", branch[i], ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
# get rid of columns that you don't need
model1 <- model1[,-c(2:8)]
model2 <- model2[,-c(2:8)]
# find matching nodes
overlap <- merge(model1, model2, by = "X.Label")
overlap$node <- gsub("\\.", "*", overlap$X.Label)
overlap$node <- gsub("-", ".", overlap$node)
# the last column of this dataframe lists all the matching nodes
# find the nodes that are only in model1
model1.only <- setdiff(model1$X.Label, overlap$X.Label)
model1.only <- as.data.frame(model1.only)
model1.only$node <- gsub("\\.", "*", model1.only[,1])
model1.only$node <- gsub("-", ".", model1.only$node)
# the last column of this dataframe lists all the matching nodes
# find the nodes that are only in model2
model2.only <- setdiff(model2$X.Label, overlap$X.Label)
model2.only <- as.data.frame(model2.only)
model2.only$node <- gsub("\\.", "*", model2.only[,1])
model2.only$node <- gsub("-", ".", model2.only$node)
# the last column of this dataframe lists all the matching nodes
# make new dataframe with two columns, node and label, to combine with dfs for each model
both <- as.data.frame(overlap$node)
both$label <- "both"
names(both) <- c("node", "label")
# make new dataframe with same columns for model 1
model1.only.list <- as.data.frame(model1.only$node)
model1.only.list$label <- date1
names(model1.only.list) <- c("node", "label")
# make new dataframe with same columns for model 2
model2.only.list <- as.data.frame(model2.only$node)
model2.only.list$label <- date2
names(model2.only.list) <- c("node", "label")
# combine dfs into one
final <- rbind(both, model1.only.list, model2.only.list)
# write new csv with all nodes listed and label stating which models it is present in
write.csv(final, file = paste("DATA/", tree, "_", branch[i], "_merged.csv", sep = ""))
i <- i + 1
}
View(model1.only)
View(model2)
View(model1.only)
# read in files
model1 <- read.csv(paste("DATA/", tree, "_", date1, "_branch", branch[2], ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
model2 <-read.csv(paste("DATA/", tree, "_", date2, "_branch", branch[2], ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
# get rid of columns that you don't need
model1 <- model1[,-c(2:8)]
model2 <- model2[,-c(2:8)]
# find matching nodes
overlap <- merge(model1, model2, by = "X.Label")
overlap$node <- gsub("\\.", "*", overlap$X.Label)
overlap$node <- gsub("-", ".", overlap$node)
# find the nodes that are only in model1
model1.only <- setdiff(model1$X.Label, overlap$X.Label)
model1.only <- as.data.frame(model1.only)
model1.only$node <- gsub("\\.", "*", model1.only[,1])
model1.only$node <- gsub("-", ".", model1.only$node)
# find the nodes that are only in model2
model2.only <- setdiff(model2$X.Label, overlap$X.Label)
model2.only <- as.data.frame(model2.only)
model2.only$node <- gsub("\\.", "*", model2.only[,1])
model2.only$node <- gsub("-", ".", model2.only$node)
# make new dataframe with two columns, node and label, to combine with dfs for each model
both <- as.data.frame(overlap$node)
both$label <- "both"
names(both) <- c("node", "label")
# make new dataframe with same columns for model 1
model1.only.list <- as.data.frame(model1.only$node)
model1.only.list$label <- date1
View(model1.only.list)
length(model1.only.list)
length(model2.only.list)
View(model2.only.list)
View(model2.only)
View(model1.only)
View(model1.only.list)
View(model2.only.list)
length(model2.only.list$node)
length(model1.only.list$node)
names(model1.only.list[1]) <- test
names(model1.only.list[1]) <- "test"
View(model1.only.list)
names(model1.only.list[,1]) <- "test"
# the last column of this dataframe lists all the matching nodes
?rbind
if (length(model1.only.list$node) < 1) {
model1.only.list <- rbind(model1.only.list, c("none", "none"))
names(model1.only.list) <- c("node", "label")
}
View(model1.only.list)
i <- 1
i <- 1
for (i in 1:length(branch)) {
# read in files
model1 <- read.csv(paste("DATA/", tree, "_", date1, "_branch", branch[2], ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
model2 <-read.csv(paste("DATA/", tree, "_", date2, "_branch", branch[2], ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
# get rid of columns that you don't need
model1 <- model1[,-c(2:8)]
model2 <- model2[,-c(2:8)]
# find matching nodes
overlap <- merge(model1, model2, by = "X.Label")
overlap$node <- gsub("\\.", "*", overlap$X.Label)
overlap$node <- gsub("-", ".", overlap$node)
# the last column of this dataframe lists all the matching nodes
# find the nodes that are only in model1
model1.only <- setdiff(model1$X.Label, overlap$X.Label)
model1.only <- as.data.frame(model1.only)
model1.only$node <- gsub("\\.", "*", model1.only[,1])
model1.only$node <- gsub("-", ".", model1.only$node)
# the last column of this dataframe lists all the matching nodes
# find the nodes that are only in model2
model2.only <- setdiff(model2$X.Label, overlap$X.Label)
model2.only <- as.data.frame(model2.only)
model2.only$node <- gsub("\\.", "*", model2.only[,1])
model2.only$node <- gsub("-", ".", model2.only$node)
# the last column of this dataframe lists all the matching nodes
?rbind
# make new dataframe with two columns, node and label, to combine with dfs for each model
both <- as.data.frame(overlap$node)
both$label <- "both"
names(both) <- c("node", "label")
# make new dataframe with same columns for model 1
model1.only.list <- as.data.frame(model1.only$node)
if (length(model1.only.list$node) < 1) {
model1.only.list <- rbind(model1.only.list, c("none", "none"))
}
names(model1.only.list) <- c("node", "label")
# make new dataframe with same columns for model 2
model2.only.list <- as.data.frame(model2.only$node)
model2.only.list$label <- date2
names(model2.only.list) <- c("node", "label")
# combine dfs into one
final <- rbind(both, model1.only.list, model2.only.list)
# write new csv with all nodes listed and label stating which models it is present in
write.csv(final, file = paste("DATA/", tree, "_", branch[i], "_merged.csv", sep = ""))
i <- i + 1
}
View(model1.only.list)
View(model2.only.list)
i <- 1
for (i in 1:length(branch)) {
# read in files
model1 <- read.csv(paste("DATA/", tree, "_", date1, "_branch", branch[i], ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
model2 <-read.csv(paste("DATA/", tree, "_", date2, "_branch", branch[i], ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
# get rid of columns that you don't need
model1 <- model1[,-c(2:8)]
model2 <- model2[,-c(2:8)]
# find matching nodes
overlap <- merge(model1, model2, by = "X.Label")
overlap$node <- gsub("\\.", "*", overlap$X.Label)
overlap$node <- gsub("-", ".", overlap$node)
# the last column of this dataframe lists all the matching nodes
# find the nodes that are only in model1
model1.only <- setdiff(model1$X.Label, overlap$X.Label)
model1.only <- as.data.frame(model1.only)
model1.only$node <- gsub("\\.", "*", model1.only[,1])
model1.only$node <- gsub("-", ".", model1.only$node)
# the last column of this dataframe lists all the matching nodes
# find the nodes that are only in model2
model2.only <- setdiff(model2$X.Label, overlap$X.Label)
model2.only <- as.data.frame(model2.only)
model2.only$node <- gsub("\\.", "*", model2.only[,1])
model2.only$node <- gsub("-", ".", model2.only$node)
# the last column of this dataframe lists all the matching nodes
?rbind
# make new dataframe with two columns, node and label, to combine with dfs for each model
both <- as.data.frame(overlap$node)
both$label <- "both"
names(both) <- c("node", "label")
# make new dataframe with same columns for model 1
model1.only.list <- as.data.frame(model1.only$node)
if (length(model1.only.list$node) < 1) {
model1.only.list <- rbind(model1.only.list, c("none", "none"))
}
names(model1.only.list) <- c("node", "label")
# make new dataframe with same columns for model 2
model2.only.list <- as.data.frame(model2.only$node)
model2.only.list$label <- date2
names(model2.only.list) <- c("node", "label")
# combine dfs into one
final <- rbind(both, model1.only.list, model2.only.list)
# write new csv with all nodes listed and label stating which models it is present in
write.csv(final, file = paste("DATA/", tree, "_", branch[i], "_merged.csv", sep = ""))
i <- i + 1
}
i <- 1
for (i in 1:length(branch)) {
# read in files
model1 <- read.csv(paste("DATA/", tree, "_", date1, "_branch", branch[i], ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
model2 <-read.csv(paste("DATA/", tree, "_", date2, "_branch", branch[i], ".txt",
sep = ""), sep = ",", header = TRUE, skip = 1)
# get rid of columns that you don't need
model1 <- model1[,-c(2:8)]
model2 <- model2[,-c(2:8)]
# find matching nodes
overlap <- merge(model1, model2, by = "X.Label")
overlap$node <- gsub("\\.", "*", overlap$X.Label)
overlap$node <- gsub("-", ".", overlap$node)
# the last column of this dataframe lists all the matching nodes
# find the nodes that are only in model1
model1.only <- setdiff(model1$X.Label, overlap$X.Label)
model1.only <- as.data.frame(model1.only)
model1.only$node <- gsub("\\.", "*", model1.only[,1])
model1.only$node <- gsub("-", ".", model1.only$node)
# the last column of this dataframe lists all the matching nodes
# find the nodes that are only in model2
model2.only <- setdiff(model2$X.Label, overlap$X.Label)
model2.only <- as.data.frame(model2.only)
model2.only$node <- gsub("\\.", "*", model2.only[,1])
model2.only$node <- gsub("-", ".", model2.only$node)
# the last column of this dataframe lists all the matching nodes
?rbind
# make new dataframe with two columns, node and label, to combine with dfs for each model
both <- as.data.frame(overlap$node)
both$label <- "both"
names(both) <- c("node", "label")
# make new dataframe with same columns for model 1
model1.only.list <- as.data.frame(model1.only$node)
if (length(model1.only.list$node) < 1) {
model1.only.list <- rbind(model1.only.list, "none")
}
model1.only.list$label <- date1
names(model1.only.list) <- c("node", "label")
# make new dataframe with same columns for model 2
model2.only.list <- as.data.frame(model2.only$node)
if (length(model2.only.list$node) < 1) {
model2.only.list <- rbind(model2.only.list, "none")
}
model2.only.list$label <- date2
names(model2.only.list) <- c("node", "label")
# combine dfs into one
final <- rbind(both, model1.only.list, model2.only.list)
# write new csv with all nodes listed and label stating which models it is present in
write.csv(final, file = paste("DATA/", tree, "_", branch[i], "_merged.csv", sep = ""))
i <- i + 1
}
warnings()
tree <- "memorialoak"
dates <- c("171221", "180109")
# find centerpoint for date 1
date1_center <- read.csv(paste("DATA/", tree,"_", dates[1], "_center_GPS.txt",
sep = ""),
skip = 1)
# find centerpoint for date 1
date1_center <- read.csv(paste("DATA/", tree,"_", dates[1], "_center.txt",
sep = ""),
skip = 1)
# find centerpoint for date 2
date2_center <- read.csv(paste("DATA/memorialoak_", dates[2], "_center_GPS.txt",
sep = ""),
skip = 1)
# find centerpoint for date 2
date2_center <- read.csv(paste("DATA/memorialoak_", dates[2], "_center.txt",
sep = ""),
skip = 1)
# find centerpoint for date 2
date2_center <- read.csv(paste("DATA/", tree, "_", dates[2], "_center.txt",
sep = ""),
skip = 1)
date2_center.x <- date2_center$X_est
date2_center.y <- date2_center$Y_est
date2_center.z <- date2_center$Z_est
date2_center.new <- as.data.frame(date2_center.x)
date2_center.new$Y_est <- date2_center.y
date2_center.new$Z_est <- date2_center.z
names(date2_center.new) <- c("X_est", "Y_est", "Z_est")
View(date2_center.new)
date2_center.new <- date2_center.new[15:18,]
View(date2_center.new)
plot(date2_center.new)
plot(x = date2_center.new$X_est, y = date2_center.new$Y_est)
plot(x = date2_center.new$X_est, y = date2_center.new$Y_est, lab = TRUE)
?plot
# loop that adds all location data to df for date[1]
i <- 1
for (i in 1:length(branches)) {
loc.data <- read.csv(paste("DATA/", tree, "_",
dates[1], "_branch", branches[i], ".txt", sep = ""),
skip = 1)
loc.data <- loc.data[-c(1:14),-c(2:8)]
all.loc.data.date1 <- rbind(all.loc.data.date1, loc.data)
i <- i + 1
}
branches <- c("01", "08", "09", "10", "13")
for (i in 1:length(branches)) {
loc.data <- read.csv(paste("DATA/", tree, "_",
dates[1], "_branch", branches[i], ".txt", sep = ""),
skip = 1)
loc.data <- loc.data[-c(1:14),-c(2:8)]
all.loc.data.date1 <- rbind(all.loc.data.date1, loc.data)
i <- i + 1
}
# make empty df for ALL BRANCHES in date[1]
all.loc.data.date1 <- data.frame(Node = character(),
X_est = numeric(),
Y_est = numeric(),
Z_est = numeric())
# loop that adds all location data to df for date[1]
i <- 1
for (i in 1:length(branches)) {
loc.data <- read.csv(paste("DATA/", tree, "_",
dates[1], "_branch", branches[i], ".txt", sep = ""),
skip = 1)
loc.data <- loc.data[-c(1:14),-c(2:8)]
all.loc.data.date1 <- rbind(all.loc.data.date1, loc.data)
i <- i + 1
}
# make empty df for ALL BRANCHES in date[2]
all.loc.data.date2 <- data.frame(Node = character(),
X_est = numeric(),
Y_est = numeric(),
Z_est = numeric())
# loop that adds all location data to df for DATE 2
i <- 1
for (i in 1:length(branches)) {
loc.data <- read.csv(paste("DATA/", tree, "_",
dates[2], "_branch", branches[i], ".txt", sep = ""),
skip = 1)
loc.data <- loc.data[-c(1:14),-c(2:8)]
all.loc.data.date2 <- rbind(all.loc.data.date2, loc.data)
i <- i + 1
}
# add column to all.loc.data that indicates ground-level z value
all.loc.data.date1$ground.alt <- date1_centerpoint[3]
tree <- "memorialoak"
dates <- c("171221", "180109")
# find centerpoint for date 1
date1_center <- read.csv(paste("DATA/", tree,"_", dates[1], "_center.txt",
sep = ""),
skip = 1)
date1_center.x <- date1_center$X_est
date1_center.y <- date1_center$Y_est
date1_center.z <- date1_center$Z_est
date1_center.new <- as.data.frame(date1_center.x)
date1_center.new$Y_est <- date1_center.y
date1_center.new$Z_est <- date1_center.z
names(date1_center.new) <- c("X_est", "Y_est", "Z_est")
date1_center.new <- date1_center.new[17:21,]
date1_center.new <- date1_center.new[-2,]
# calculate L, M, N
dirnum1 <- date1_center.new[1,] - date1_center.new[2,]
dirnum2 <- date1_center.new[3,] - date1_center.new[4,]
# calculate x
x <- (date1_center.new[1,1] * as.numeric(dirnum2[1]) -
date1_center.new[3,1] * as.numeric(dirnum1[1])) /
(as.numeric(dirnum2[1]) - as.numeric(dirnum1[1]))
# calculate y
y <- (date1_center.new[1,2] * as.numeric(dirnum2[2]) -
date1_center.new[3,2] * as.numeric(dirnum1[2])) /
(as.numeric(dirnum2[2]) - as.numeric(dirnum1[2]))
# calculate Z
z <- (date1_center.new[1,3] * as.numeric(dirnum2[3]) -
date1_center.new[3,3] * as.numeric(dirnum1[3])) /
(as.numeric(dirnum2[3]) - as.numeric(dirnum1[3]))
date1_centerpoint <- c(x, y, z)
date1_center.new[5,] <- date1_centerpoint
# add column to all.loc.data that indicates ground-level z value
all.loc.data.date1$ground.alt <- date1_centerpoint[3]
View(all.loc.data.date1)
# calculate distance from node to ground
all.loc.data.date1$vert.dist <- all.loc.data.date1$metersalt - all.loc.data.date1$ground.alt
tree <- "memorialoak"
dates <- c("171221", "180109")
branches <- c("01", "08", "09", "10", "13")
# make empty df for ALL BRANCHES in date[1]
all.loc.data.date1 <- data.frame(Node = character(),
X_est = numeric(),
Y_est = numeric(),
Z_est = numeric())
# loop that adds all location data to df for date[1]
i <- 1
for (i in 1:length(branches)) {
loc.data <- read.csv(paste("DATA/", tree, "_",
dates[1], "_branch", branches[i], ".txt", sep = ""),
skip = 1)
loc.data <- loc.data[-c(1:14),-c(2:8)]
all.loc.data.date1 <- rbind(all.loc.data.date1, loc.data)
i <- i + 1
}
# use date1_centerpoint from 03.findcenterpoint script
all.loc.data.date1$reflat <- date1_centerpoint[2]
all.loc.data.date1$reflong <- date1_centerpoint[1]
all.loc.data.date1$rlat <- all.loc.data.date1$reflat * pi/180
# find meters per degree latitude at centerpoint
all.loc.data.date1$m.lat <- 111132.92 - 559.82 *
cos(2 * all.loc.data.date1$rlat) + 1.175 *
cos(4 * all.loc.data.date1$rlat)
# find meters per degree longitude at centerpoint
all.loc.data.date1$m.long <- 111412.84 *
cos(all.loc.data.date1$rlat) - 93.5 *
cos(3 * all.loc.data.date1$rlat)
all.loc.data.date1$meterslat <- all.loc.data.date1$Y_est * all.loc.data.date1$m.lat
all.loc.data.date1$meterslong <- all.loc.data.date1$X_est * all.loc.data.date1$m.long
all.loc.data.date1$metersalt <- all.loc.data.date1$Z_est
# calculate distance from node to ground
all.loc.data.date1$vert.dist <- all.loc.data.date1$metersalt - all.loc.data.date1$ground.alt
View(all.loc.data.date1)
# add column to all.loc.data that indicates ground-level z value
all.loc.data.date1$ground.alt <- date1_centerpoint[3]
# calculate distance from node to ground
all.loc.data.date1$vert.dist <- all.loc.data.date1$metersalt - all.loc.data.date1$ground.alt
# find distance from each node to centerpoint
center.dist <- function(centerpoint, nodes) {
distances <- c(1:length(nodes[,1]))
for (i in 1:length(nodes[,1])) {
distance <- sqrt((centerpoint[1, 9] - nodes[i,10]) ^2 +
(centerpoint[1, 10] - nodes[i,11]) ^2 +
(centerpoint[1, 11] - nodes[i,12]) ^2)
distances[i] <- distance
i <- i + 1
}
return(distances)
}
# calculate distance from node to centerpoint
all.loc.data.date1$center.dist <- center.dist(centerpoint = date1_centerpointdf,
nodes = all.loc.data.date1)
